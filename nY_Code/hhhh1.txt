Load Signed Byte 
LSB
Load Signed Halfword 
LSH
Load Unsigned Byte 
LUB
Load Unsigned Halfword 
LUH
Load Word 
LW
Load Unsigned Word
LUW
Load Doubleword
LD
Load Signed Byte from Alternate space
LSBfAs
Load Signed Halfword from Alternate space
LSHfAs
Load Unsigned Byte from Alternate space
LUBfAs
Load Unsigned Halfword from Alternate space
LUHfAs
Load Word from Alternate space
LWfAs
Load Doubleword from Alternate space
LDfAs
Load Floating-point Register
LFR
Load Double Floating-point Register
LDFR
Load Floating-point State Register
LFSR
Load Coprocessor Register
LCR
Load Double Coprocessor Register
LDCR
Load Coprocessor State Register
LCSR
load multiple of registers from sequential memory
lmorfsm
load multiple for process swap
lmfps
load multiple of registers & PC from sequential memory
lmor&Pfsm
Store Byte 
SB
Store Byte into Alternate space
SBiAs
Store Halfword 
SH
Store Halfword into Alternate space
SHiAs
Store Word 
SW
Store Word into Alternate space
SWiAs
Store Doubleword
SD
Store Doubleword into Alternate space
SDiAs
Store Floating-point
SF
Store Double Floating-point
SDF
Store Floating-point State Register
SFSR
Store Double Floating-point deferred-trap Queue
SDFdQ
Store Coprocessor
SC
Store Double Coprocessor
SDC
Store Coprocessor State Register
SCSR
Store Double Coprocessor deferred-trap Queue
SDCdQ
Store multiple
Sm
Store Barrier
SB
Atomic Load-Store Unsigned Byte
ALUB
Atomic Load-Store Unsigned Byte(from alternate space)
ALUBas
SWAP Register with Memory
SRwM
Swaps a byte between registers and memory
Sabbram
SWAP Register with Memory (from alternate space)
SRwM(as
Multiply
M
Unsigned Integer Multiply
UIM
Unsigned Integer Multiply immediate
UIMi
Unsigned Integer Multiply and modify icc
UIMami
Unsigned Integer Multiply immediate and modify icc
UIMiami
Signed Integer Multiply
SIM
Signed Integer Multiply immediate
SIMi
Signed Integer Multiply and modify icc
SIMami
Signed Integer Multiply immediate and modify icc
SIMiami
Multiply high
Mh
Multiply high (Signed-unsigned)
Mh(
Multiply high (Unsigned)
Mh(
Multiply Accum.
MA
Unsigned Integer divide
UId
Unsigned Integer divide immediate
UIdi
Unsigned Integer divide and modify icc
UIdami
Unsigned Integer divide immediate and modify icc
UIdiami
Signed Integer divide
SId
Signed Integer divide immediate
SIdi
Signed Integer divide and modify icc
SIdami
Signed Integer divide immediate and modify icc
SIdiami
Remainder 
R
Remainder unsigned
Ru
Add
A
Add immediate
Ai
Add and modify icc
Aami
Add immediate and modify icc 
Aiami
Add with carry
Awc
Add immediate with carry 
Aiwc
Add with carry and modify icc
Awcami
Add immediate with carry and modify icc
Aiwcami
Tagged Add and modify icc
TAami
Tagged Add immediate and modify icc 
TAiami
Tagged Add, modify icc and trap on overflow
TAmiatoo
Tagged Add immediate, modify icc and trap on overflow
TAimiatoo
COMPARE NEGATIVE
CN
COMPARE
C
Subtract
S
Sub immediate
Si
Sub and modify icc
Sami
Sub immediate and modify icc 
Siami
Reverse subtract
Rs
Sub with carry
Swc
Sub immediate with carry 
Siwc
Sub with carry and modify icc
Swcami
Sub immediate with carry and modify icc
Siwcami
Reverse subtract with carry
Rswc
Tagged sub and modify icc
Tsami
Tagged sub immediate and modify icc 
Tsiami
Tagged sub, modify icc and trap on overflow
Tsmiatoo
Tagged sub immediate, modify icc and trap on overflow
Tsimiatoo
Bit-wise AND
BA
Bit-wise ANDI
BA
Bit-wise AND and modify the icc
BAamti
Bit-wise ANDI and modify the icc
BAamti
Bit-wise AND with complement
BAwc
Bit-wise ANDI with complement
BAwc
Bit-wise AND with complement and modify icc
BAwcami
Bit-wise ANDI with complement and modify icc
BAwcami
Bit-wise XOR
BX
Bit-wise XORI
BX
Bit-wise XOR and modify the icc
BXamti
Bit-wise XORI and modify the icc
BXamti
Bit-wise XOR with complement
BXwc
Bit-wise XORI with complement
BXwc
Bit-wise XOR with complement and modify icc
BXwcami
Bit-wise XORI with complement and modify icc
BXwcami
Bit-wise OR
BO
Bit-wise ORI
BO
Bit-wise OR and modify the icc
BOamti
Bit-wise ORI and modify the icc
BOamti
Bit-wise OR with complement
BOwc
Bit-wise ORI with complement
BOwc
Bit-wise OR with complement and modify icc
BOwcami
Bit-wise ORI with complement and modify icc
BOwcami
Shift left logical 
Sll
Shift right logical
Srl
Shift right arithmetic
Sra
Shift left logical immediate
Slli
Shift right logical immediate
Srli
Shift right arithmetic immediate
Srai
Jump and Link
JaL
Jump and Link register
JaLr
Return from Trap
RfT
Call and Link
CaL
Branch Never
BN
Branch Always
BA
BRANCH TO ADDRESS
BTA
BRANCH AND LINK
BAL
Branch if equal
Bie
Branch if not equal
Bine
Branch if greater than or equal
Bigtoe
Branch if less than or equal
Biltoe
Branch if greater than or equal (unsigned)
Bigtoe(
Branch if less than or equal (unsigned)
Biltoe(
Branch if equal (immidiate)
Bie(
Branch if not equal (immidiate)
Bine(
Branch on Greater
BoG
Branch on Less or Equal
BoLoE
Branch on Less
BoL
Branch on Greater Unsigned
BoGU
Branch on Carry Set (Less than, Unsigned)
BoCS(tU
Branch on Positive
BoP
Branch on Negative
BoN
Branch on Overflow Clear
BoOC
Branch on Overflow Set
BoOS
Branch on
Bo
Coprocessor
C
Condition Codes
CC
Set high-order 22 bits
Sh2b
Save (CWP)
S(
Save immediate (CWP)
Si(
Restore (CWP)
R(
Restore immediate (CWP) 
Ri(
Move to register from coprocessor
Mtrfc
Move to coprocessor from register
Mtcfr
Move not
Mn
Move
M
Read Y
RY
Read PSR
RP
Read wim
Rw
Read tbr
Rt
Read asr
Ra
Write from reg to Y
WfrtY
Write from imm to Y
WfitY
Write from reg to psr
Wfrtp
Write from imm to psr
Wfitp
Write from reg to wim
Wfrtw
Write from imm to wim
Wfitw
Write from reg to tbr
Wfrtt
Write from imm to tbr
Wfitt
wr regrs1 , reg_or_imm, asr_regrd
wr,ra
Software interrupt
Si
NOP
N
Coprocessor Operate
CO
Coprocessor Operate
CO
Trap Always
TA
Trap Never
TN
Trap on Not Equal
ToNE
Trap on Equal
ToE
Trap on Greater
ToG
Trap on Less or Equal
ToLoE
Trap on Greater or Equal
ToGoE
Trap on Less
ToL
Trap on Greater Unsigned
ToGU
Trap on Less or Equal Unsigned
ToLoEU
Trap on Carry Clear (Greater than or Equal, Unsigned)
ToCC(toEU
Trap on Carry Set (Less Than, Unsigned)
ToCS(TU
Trap on Positive
ToP
Trap on Negative
ToN
Trap on Overflow Clear
ToOC
Trap on Overflow Set
ToOS
"Unimplemented
"
Instruction"
I
"Flush Instruction
"I
Memory"
M
